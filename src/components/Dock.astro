---
export interface Props {
  items: Array<{
    name: string;
    icon: string;
    href: string;
    isActive?: boolean;
  }>;
}

const { items } = Astro.props;
---

<div class="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50" data-dock>
  <div class="bg-white/20 dark:bg-black/20 backdrop-blur-macos border border-white/30 dark:border-white/10 rounded-macos-lg px-4 py-3 shadow-macos-lg">
    <div class="flex items-center space-x-3">
      {items.map((item) => (
        <a
          href={item.href}
          class={`group relative flex items-center justify-center w-12 h-12 rounded-lg transition-all duration-200 ease-out transform hover:scale-110 ${item.isActive ? 'is-active' : ''}`}
          title={item.name}
          data-dock-link
        >
          <span class="text-xl">{item.icon}</span>
          <!-- Tooltip -->
          <div class="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
            <div class="bg-macos-gray-800 text-white text-xs rounded-md px-2 py-1 whitespace-nowrap">
              {item.name}
            </div>
            <div class="w-2 h-2 bg-macos-gray-800 transform rotate-45 absolute top-full left-1/2 -translate-x-1/2 -mt-1"></div>
          </div>
        </a>
      ))}
    </div>
  </div>
</div>

<style is:global>
  /* Base (non-active) state ensured via conditional below; using @apply so Tailwind picks classes */
  [data-dock] a:not(.is-active) {
    @apply bg-white/10 hover:bg-white/20 dark:bg-white/5 dark:hover:bg-white/10 text-macos-gray-800 dark:text-macos-gray-200;
  }
  [data-dock] a.is-active {
    @apply bg-macos-blue-500 text-white shadow-lg;
  }
</style>

<script>
  // @ts-nocheck
  // Enhance dock with dynamic active state for in-page section links (#hash)
  document.addEventListener('DOMContentLoaded', () => {
    const dock = document.querySelector('[data-dock]');
    if (!dock) return;
  const links = Array.from(dock.querySelectorAll('a[href^="#"]'));
    if (!links.length) return; // No hash links on this page

    /** @type {{ link: HTMLAnchorElement; el: HTMLElement }[]} */
    const targets = links
      .map((link) => {
        const id = link.getAttribute('href');
        if (!id) return null;
        const el = document.querySelector(id);
        return el ? { link, el } : null;
      })
      .filter((v) => v !== null);

    if (!targets.length) return;

  /** @param {HTMLAnchorElement} link */
  function setActive(link) {
      links.forEach((l) => l.classList.remove('is-active'));
      link.classList.add('is-active');
    }

    // Immediate feedback on click
    links.forEach((l) => l.addEventListener('click', () => setActive(l)));

    // If page loads with a hash, respect it
    if (location.hash) {
  const initial = links.find((l) => l.getAttribute('href') === location.hash);
      if (initial) setActive(initial);
    }

    // Observe sections to update active state on scroll
    const observer = new IntersectionObserver(
      (entries) => {
        const visible = entries.filter((e) => e.isIntersecting);
        if (!visible.length) return;
        visible.sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top);
        const topMost = visible[0];
        const match = targets.find((t) => t.el === topMost.target);
        if (match) setActive(match.link);
      },
      { threshold: [0.25, 0.4, 0.6], rootMargin: '-20% 0px -40% 0px' }
    );

    targets.forEach((t) => observer.observe(t.el));

    // Fallback: if none active yet, activate first section when near top
    if (!links.some((l) => l.classList.contains('is-active'))) {
      setActive(links[0]);
    }
  });
</script>
