---
import Layout from '../layouts/Layout.astro';
import { personalInfo } from '../utils/personal';
import Window from '../components/Window.astro';
import ProjectCard from '../components/ProjectCard.astro';
import Dock from '../components/Dock.astro';
import ProjectListItem from '../components/ProjectListItem.astro';
import { experiments as allExperiments } from '../utils/experimentsData';
import { testimonials } from '../utils/testimonials';
import TestimonialCard from '../components/TestimonialCard.astro';
import TestimonialsCarousel from '../components/TestimonialsCarousel.astro';

// Personalization (update these values as needed)
const me = {
  name: 'Anatoly Khalizev',
  title: 'Senior UX Designer', // Primary / core title
  // Secondary / rotating modern hybrid titles (feel free to edit / reorder)
  roles: [
    'Design Engineer',
    'AI Interaction Architect',
    'Creative Technologist',
    'AI-enhanced Product Designer'
  ],
  tagline: 'I craft reliable, elegant software and love turning ideas into polished products.',
  photo: '/anatoly.png', // Place your profile photo at public/anatoly.png (square ~640x640). Optional: add /anatoly.webp for smaller size.
};

// Sample project data - this will be replaced with dynamic data later
const projects = [
  {
    title: "Sample Project 1",
    description: "A beautiful web application built with modern technologies and best practices.",
    image: "/api/placeholder/400/300",
    technologies: ["React", "TypeScript", "Tailwind"],
    githubUrl: "https://github.com",
    liveUrl: "https://example.com",
    category: "Web Development"
  },
  {
    title: "Sample Project 2", 
    description: "An innovative mobile app that solves real-world problems with elegant design.",
    image: "/api/placeholder/400/300",
    technologies: ["React Native", "Node.js", "MongoDB"],
    githubUrl: "https://github.com",
    category: "Mobile Development"
  },
  {
    title: "Sample Project 3",
    description: "A data visualization dashboard with interactive charts and real-time updates.",
    technologies: ["Vue.js", "D3.js", "Python"],
    githubUrl: "https://github.com",
    liveUrl: "https://example.com",
    category: "Data Science"
  }
];

const dockItems = [
  { name: "About", icon: "üë§", href: "#about" },
  { name: "Projects", icon: "üíº", href: "#projects" },
  { name: "Skills", icon: "üõ†Ô∏è", href: "#skills" },
  { name: "Shots", icon: "üé®", href: "/dribbble", alignRight: true },
  { name: "Experiments", icon: "üß™", href: "/experiments" },
  { name: "Contact", icon: "üìß", href: "#contact" }
];

// Descriptions for skill tooltips (2 concise sentences each)
const skillDescriptions: Record<string, string> = {
  'React': 'Component-driven library for building interactive UIs. I leverage hooks, context patterns, and performance profiling to create resilient frontends.',
  'Vue.js': 'Progressive framework balancing approachability and power. Used for rapid prototypes and reactive state modeling.',
  'TypeScript': 'Static typing layer that hardens code quality and refactors. I design ergonomic types & utility generics for safer APIs.',
  'Tailwind CSS': 'Utility-first CSS framework enabling design velocity while preserving consistency. I extend tokens for a coherent macOS-inspired system.',
  'Next.js': 'Full‚Äëstack React framework: routing, SSR/SSG, edge streaming. I optimize data fetching and bundle footprint for fast TTFB.',
  'Node.js': 'Event-driven runtime ideal for IO-heavy services. I structure modular services with attention to observability & resource efficiency.',
  'Python': 'Multi-paradigm language great for automation & AI pipelines. I use it for quick data tooling and ML experimentation.',
  'PostgreSQL': 'Robust relational database with strong ACID guarantees. I design normalized schemas plus judicious indexes & CTE-driven analytics.',
  'MongoDB': 'Document store suited for flexible, evolving schemas. I apply schema validation and aggregation pipelines for agility with control.',
  'Express': 'Minimal Node.js web framework. I compose middleware for auth, rate limiting, and structured error handling.',
  'Git': 'Version control backbone for collaboration & traceability. I keep linear histories via interactive rebasing and atomic commits.',
  'Docker': 'Containerization for reproducible environments. I craft slim images and multi-stage builds to cut cold start & attack surface.',
  'AWS': 'Cloud platform for scalable infrastructure. Comfortable with core services (EC2, S3, CloudFront, Lambda) and infrastructure as code patterns.',
  'Figma': 'Collaborative interface design & prototyping platform. I architect complex interactive components, evolve & steward design systems, and compose responsive, constraint‚Äëdriven layouts.',
  'VS Code': 'Primary editor configured for rapid feedback loops. Extensions + tasks streamline refactors, tests, and design/dev alignment.',
  'Neovim': 'Modal, extensible terminal-first editor I tune with Lua for instant navigation and ergonomic motions. LSP + treesitter + fuzzy finding complement VS Code for deep focus sessions.',
  'LLM Orchestration (LangChain)': 'Framework patterns for chaining model calls, tools, and memory. I design modular graph flows with observability & failure recovery.',
  'RAG Pipelines': 'Retrieval Augmented Generation: ground model outputs in domain context. I optimize chunking, embeddings, and ranking for factuality.',
  'Vector DBs (Pinecone / Weaviate / pgvector)': 'Similarity search infrastructure for embeddings. I tune dimensionality, filtering, and index types for latency vs. recall balance.',
  'Prompt Engineering': 'Systematic crafting of prompt templates & guards. I iterate with evals to stabilize outputs across edge scenarios.',
  'Embeddings & Semantic Search': 'Numerical text representations enabling clustering, search, and personalization. I evaluate models with domain relevance metrics.',
  'Guardrails & Evaluation': 'Safety & quality layer: validation, red-teaming, regression benchmarks. I automate eval suites to catch drift early.'
};
---

<Layout title={`Portfolio - ${me.name}`}>
  <main class="min-h-screen bg-gradient-to-br from-macos-blue-500/5 to-macos-gray-100 dark:from-macos-gray-900 dark:to-macos-gray-800">
  <!-- Hero Section -->
  <section data-ux-note="Consistency builds intuitive interfaces." data-ux-side="left" class="relative h-screen flex items-center justify-center px-6">
      <div class="text-center max-w-4xl mx-auto">
        <div class="mb-10 relative">
          <div class="w-40 h-40 mx-auto mb-6 rounded-full shadow-macos-lg ring-4 ring-white/70 dark:ring-macos-gray-800/80 overflow-hidden bg-gradient-to-br from-macos-blue-500 to-macos-blue-600 flex items-center justify-center glitch-avatar" style={`--avatar-url: url(${me.photo})`}>
            <div class="glitch-overlay" aria-hidden="true"></div>
            <!-- Responsive avatar -->
            <picture>
              <!-- Future: add WebP sources if available -->
              <source srcset="/anatoly-256.png 256w, /anatoly-512.png 512w, /anatoly.png 1024w" sizes="160px" />
              <img 
                src={me.photo} 
                alt={`${me.name} portrait`} 
                loading="eager" 
                width="640" height="640"
                class="w-full h-full object-cover" 
                style="object-position:center;" 
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'" />
            </picture>
            <div class="hidden w-full h-full items-center justify-center text-5xl text-white font-semibold select-none">
              {me.name.split(' ').map(p=>p[0]).slice(0,2).join('')}
            </div>
          </div>
        </div>

        <h1 class="text-5xl md:text-7xl font-bold text-macos-gray-900 dark:text-white mb-6 tracking-tight">
          {me.name}
        </h1>

        <p id="title-line" data-roles={JSON.stringify(me.roles)} class="text-xl md:text-2xl text-macos-gray-700 dark:text-macos-gray-300 mb-6 font-medium flex flex-col gap-1 md:block md:space-x-2">
          <span>{me.title}</span>
          <span class="before:content-['‚Ä¢'] before:mx-2 hidden md:inline" aria-hidden="true"></span>
          <span class="text-macos-blue-600 dark:text-macos-blue-400 inline-block" id="role-rotator">{me.roles[0]}</span>
        </p>

        <p class="text-lg text-macos-gray-500 dark:text-macos-gray-500 max-w-2xl mx-auto mb-12 leading-relaxed">
          {me.tagline}
        </p>
        
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="#projects" 
            class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos"
          >
            View My Work
          </a>
          <a 
            href="#contact" 
            class="bg-white/80 dark:bg-macos-gray-800/80 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/50 text-macos-gray-900 dark:text-white px-8 py-3 rounded-macos font-medium transition-colors hover:bg-white/90 dark:hover:bg-macos-gray-800/90"
          >
            Get In Touch
          </a>
        </div>
      </div>
    </section>

    <!-- About Section -->
  <section id="about" data-ux-note="Clarity emerges from purposeful constraints." data-ux-side="right" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <Window title="About Me" class="max-w-4xl mx-auto">
          <div class="prose prose-lg dark:prose-invert max-w-none">
            <p class="text-macos-gray-600 dark:text-macos-gray-400 leading-relaxed">
              I'm a passionate developer with expertise in modern web technologies. 
              I love building applications that are not only functional but also provide 
              an exceptional user experience. My approach combines technical excellence 
              with thoughtful design to create solutions that truly make a difference.
            </p>
            
            <div class="grid md:grid-cols-3 gap-6 mt-8">
              <div class="text-center">
                <div class="text-3xl mb-2">üéØ</div>
                <h3 class="font-semibold text-macos-gray-900 dark:text-white mb-2">Problem Solver</h3>
                <p class="text-sm text-macos-gray-600 dark:text-macos-gray-400">
                  I enjoy tackling complex challenges and finding elegant solutions.
                </p>
              </div>
              
              <div class="text-center">
                <div class="text-3xl mb-2">üöÄ</div>
                <h3 class="font-semibold text-macos-gray-900 dark:text-white mb-2">Innovation Focused</h3>
                <p class="text-sm text-macos-gray-600 dark:text-macos-gray-400">
                  Always exploring new technologies and methodologies.
                </p>
              </div>
              
              <div class="text-center">
                <div class="text-3xl mb-2">ü§ù</div>
                <h3 class="font-semibold text-macos-gray-900 dark:text-white mb-2">Team Player</h3>
                <p class="text-sm text-macos-gray-600 dark:text-macos-gray-400">
                  Collaborative approach to building great products.
                </p>
              </div>
            </div>
          </div>
        </Window>
      </div>
    </section>

    <!-- Projects Section -->
  <section id="projects" data-ux-note="Prioritize hierarchy to guide attention." data-ux-side="left" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-8">
          <h2 class="text-4xl font-bold text-macos-gray-900 dark:text-white mb-3">
            Featured Projects
          </h2>
          <p class="text-lg text-macos-gray-600 dark:text-macos-gray-400">
            A collection of my recent work and side projects
          </p>
        </div>

        <!-- View Toggle (controls both Projects and Experiments) -->
        <div class="flex justify-center mb-8">
          <div class="flex items-center gap-2 bg-white/70 dark:bg-macos-gray-800/70 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/40 rounded-macos px-2 py-1 shadow-macos" id="home-view-toggle" role="group" aria-label="Toggle view mode">
            <button type="button" class="home-view-btn grid-view active inline-flex items-center gap-2 px-3 py-1.5 rounded-md text-sm text-macos-gray-800 dark:text-macos-gray-100 hover:bg-macos-gray-100 dark:hover:bg-macos-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-macos-blue-500" aria-pressed="true" data-view="grid">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M3 3h8v8H3V3zm10 0h8v8h-8V3zM3 13h8v8H3v-8zm10 0h8v8h-8v-8z"/></svg>
              Grid
            </button>
            <button type="button" class="home-view-btn list-view inline-flex items-center gap-2 px-3 py-1.5 rounded-md text-sm text-macos-gray-700 dark:text-macos-gray-300 hover:bg-macos-gray-100 dark:hover:bg-macos-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-macos-blue-500" aria-pressed="false" data-view="list">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M4 6h16v2H4V6zm0 5h16v2H4v-2zm0 5h16v2H4v-2z"/></svg>
              List
            </button>
          </div>
        </div>
        
        <!-- Grid (keep existing count) -->
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8" data-view-section="grid">
          {projects.map((project) => (
            <ProjectCard {...project} />
          ))}
        </div>
        
        <!-- List (show up to 10) -->
        <div class="hidden flex-col gap-2" data-view-section="list">
          {projects.slice(0, 10).map((project) => (
            <ProjectListItem {...project} />
          ))}
        </div>
        
        <div class="text-center mt-12">
          <a 
            href="/projects" 
            class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos inline-block"
          >
            View All Projects
          </a>
        </div>
      </div>
    </section>

    <!-- Skills Section -->
  <section id="skills" data-ux-note="Clear affordances reduce friction." data-ux-side="right" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <Window title="Skills & Technologies" class="max-w-4xl mx-auto">
          <div class="grid md:grid-cols-3 xl:grid-cols-4 gap-8 skills-grid">
            <div>
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">Frontend</h3>
              <div class="space-y-2">
                {["React", "Vue.js", "TypeScript", "Tailwind CSS", "Next.js"].map((skill) => (
                  <div class="skill-chip group bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm relative focus-within:ring-2 focus-within:ring-macos-blue-500" tabindex="0" aria-describedby={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`}>
                    {skill}
                    <div role="tooltip" id={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`} class="skill-tooltip">
                      {skillDescriptions[skill]}
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">Backend</h3>
              <div class="space-y-2">
                {["Node.js", "Python", "PostgreSQL", "MongoDB", "Express"].map((skill) => (
                  <div class="skill-chip group bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm relative" tabindex="0" aria-describedby={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`}>
                    {skill}
                    <div role="tooltip" id={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`} class="skill-tooltip">
                      {skillDescriptions[skill]}
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <div class="tools-col">
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">Tools</h3>
              <div class="relative flip-wrapper perspective-1200">
                <div id="tools-flip-card" class="flip-card-inner duration-700 ease-in-out will-change-transform">
                  <div class="flip-face flip-front space-y-2">
                    {["Figma", "Git", "Docker", "AWS", "VS Code", "Neovim"].map((skill) => (
                      skill === 'Git' ? (
                        <div class="relative">
                          <button
                            type="button"
                            id="git-flip-btn"
                            class="skill-chip git-octocat-intro group relative w-full text-left bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm hover:bg-macos-blue-500 hover:text-white dark:hover:bg-macos-blue-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-macos-blue-500 transition-colors overflow-hidden"
                            aria-expanded="false"
                            aria-controls="git-activity-panel"
                            aria-describedby="tip-git"
                            aria-label="Git activity (recent commits)"
                          >
                            <span class="octocat-track absolute inset-0 pointer-events-none select-none" aria-hidden="true"></span>
                            <span class="octocat-anim-wrapper pointer-events-none select-none" aria-hidden="true">
                              <svg class="octocat-anim w-5 h-5" viewBox="0 0 24 24" fill="currentColor" role="img" aria-label="" focusable="false">
                                <path d="M12 0C5.37 0 0 5.37 0 12c0 5.3 3.438 9.8 8.205 11.387.6.113.82-.263.82-.582 0-.287-.01-1.244-.015-2.255-3.338.726-4.042-1.415-4.042-1.415-.546-1.387-1.333-1.756-1.333-1.756-1.09-.745.082-.73.082-.73 1.205.085 1.84 1.238 1.84 1.238 1.07 1.834 2.807 1.304 3.492.997.108-.775.418-1.305.762-1.605-2.665-.303-5.466-1.335-5.466-5.93 0-1.31.468-2.382 1.236-3.223-.124-.303-.535-1.523.117-3.176 0 0 1.008-.322 3.3 1.23a11.52 11.52 0 0 1 3.003-.404c1.02.005 2.047.138 3.003.404 2.29-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.873.118 3.176.77.841 1.235 1.913 1.235 3.223 0 4.607-2.804 5.624-5.476 5.92.43.37.823 1.102.823 2.222 0 1.604-.014 2.896-.014 3.286 0 .322.217.7.825.58C20.565 21.796 24 17.297 24 12 24 5.37 18.63 0 12 0Z" />
                              </svg>
                            </span>
                            <span class="git-label inline-flex items-center">Git <span class="ml-1 text-[10px] uppercase tracking-wide opacity-60 group-hover:opacity-80">activity</span></span>
                          </button>
                          <div role="tooltip" id="tip-git" class="skill-tooltip">
                            {skillDescriptions['Git']}
                          </div>
                        </div>
                      ) : (
                        <div class="skill-chip group bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm relative" tabindex="0" aria-describedby={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`}>
                          {skill}
                          <div role="tooltip" id={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`} class="skill-tooltip">
                            {skillDescriptions[skill]}
                          </div>
                        </div>
                      )
                    ))}
                  </div>
                  <div id="git-activity-panel" class="flip-face flip-back flex flex-col rounded-md overflow-hidden bg-white dark:bg-macos-gray-800 border border-macos-gray-200 dark:border-macos-gray-700">
                    <div class="flex items-center justify-between px-3 py-2 border-b border-macos-gray-200 dark:border-macos-gray-700 bg-macos-gray-50 dark:bg-macos-gray-700/40">
                      <h4 class="text-xs font-semibold text-macos-gray-700 dark:text-macos-gray-200 tracking-wide">Recent Git Commits</h4>
                      <div class="flex items-center gap-2">
                        <a href="https://github.com/akhalizev" target="_blank" rel="noopener noreferrer" class="text-macos-blue-600 dark:text-macos-blue-400 hover:underline text-[10px] font-medium">Profile</a>
                        <button type="button" id="git-back-btn" class="w-6 h-6 inline-flex items-center justify-center rounded-md hover:bg-macos-gray-200 dark:hover:bg-macos-gray-600 text-macos-gray-500 dark:text-macos-gray-400 focus:outline-none focus-visible:ring-2 focus-visible:ring-macos-blue-500" aria-label="Back to tools">‚Ü∫</button>
                      </div>
                    </div>
                    <div class="git-activity-chart-wrapper px-3 pt-2 pb-1 border-b border-macos-gray-200 dark:border-macos-gray-700">
                      <div class="flex items-center justify-between mb-1">
                        <span class="text-[10px] font-medium tracking-wide text-macos-gray-500 dark:text-macos-gray-400">Last 14 Days</span>
                        <span id="git-activity-total" class="text-[10px] text-macos-blue-600 dark:text-macos-blue-400"></span>
                      </div>
                      <div id="git-activity-chart" class="git-activity-chart" role="img" aria-label="Git commits last 14 days"></div>
                      <div class="flex items-center justify-end gap-1 mt-1 opacity-70">
                        <span class="git-legend-box level-0"></span><span class="git-legend-box level-1"></span><span class="git-legend-box level-2"></span><span class="git-legend-box level-3"></span><span class="git-legend-box level-4"></span>
                      </div>
                    </div>
                    <div id="git-activity-content" class="flex-1 overflow-auto p-2 text-[11px] leading-snug space-y-2 custom-scrollbar">
                      <div class="text-macos-gray-400 dark:text-macos-gray-500">Click Git to load activity‚Ä¶</div>
                    </div>
                    <div class="px-3 py-1.5 text-[9px] text-macos-gray-400 dark:text-macos-gray-500 border-t border-macos-gray-200 dark:border-macos-gray-700 flex items-center justify-between uppercase tracking-wide">
                      <span>Public Events</span>
                      <button type="button" id="git-refresh" class="font-semibold px-1 py-0.5 rounded bg-macos-gray-100 dark:bg-macos-gray-700 hover:bg-macos-blue-500 dark:hover:bg-macos-blue-600 hover:text-white transition-colors">Refresh</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="ai-tech-col">
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">AI & Emerging Tech</h3>
              <div class="space-y-2">
                {["Prompt Engineering", "LLM Orchestration (LangChain)", "RAG Pipelines", "Vector DBs (Pinecone / Weaviate / pgvector)", "Embeddings & Semantic Search", "Guardrails & Evaluation"].map((skill) => (
                  <div class="skill-chip group bg-gradient-to-r from-macos-blue-500/10 to-macos-blue-500/5 dark:from-macos-blue-600/20 dark:to-macos-blue-500/10 border border-macos-blue-500/20 dark:border-macos-blue-400/20 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-[13px] leading-tight backdrop-blur-sm relative" tabindex="0" aria-describedby={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`}>
                    {skill}
                    <div role="tooltip" id={`tip-${skill.replace(/[^a-z0-9]/ig,'-')}`} class="skill-tooltip max-w-xs">
                      {skillDescriptions[skill]}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <!-- (popover removed; replaced by flip card) -->
        </Window>
      </div>
    </section>

    <!-- Experiments Section -->
  <section id="experiments" data-ux-note="Exploration fuels innovation." data-ux-side="left" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-macos-gray-900 dark:text-white mb-4">
            Experiments & Research
          </h2>
          <p class="text-lg text-macos-gray-600 dark:text-macos-gray-400">
            Exploring new technologies, concepts, and creative solutions
          </p>
        </div>
        
        <!-- Grid (keep existing count: 4) -->
        <div class="grid md:grid-cols-2 gap-8" data-view-section="grid">
          {allExperiments.slice(0, 4).map((experiment) => {
            const primaryUrl = experiment.demoUrl || experiment.githubUrl;
            const isExternal = primaryUrl && (primaryUrl.startsWith('http://') || primaryUrl.startsWith('https://'));
            
            return (
              <a 
                href={primaryUrl}
                target={isExternal ? "_blank" : undefined}
                rel={isExternal ? "noopener noreferrer" : undefined}
                class="block h-full group cursor-pointer transition-all duration-200 hover:scale-[1.02] hover:shadow-lg"
                aria-label={`View ${experiment.title} - ${experiment.category}`}
              >
                <Window title={experiment.title} class="h-full group-hover:shadow-macos-lg transition-shadow duration-200">
                  <div class="h-full flex flex-col">
                    <div class="flex-1">
                      <div class="flex items-center justify-between mb-4">
                        <span class="text-sm font-medium text-macos-blue-500 dark:text-macos-blue-400 group-hover:text-macos-blue-600 dark:group-hover:text-macos-blue-300 transition-colors">
                          {experiment.category}
                        </span>
                        <span class={`text-xs px-2 py-1 rounded-full font-medium ${
                          experiment.status === 'Complete' 
                            ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400'
                            : experiment.status === 'In Progress'
                            ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                            : experiment.status === 'Prototype'
                            ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400'
                            : 'bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-400'
                        }`}>
                          {experiment.status}
                        </span>
                      </div>
                      
                      <p class="text-macos-gray-600 dark:text-macos-gray-400 mb-4 leading-relaxed group-hover:text-macos-gray-700 dark:group-hover:text-macos-gray-300 transition-colors">
                        {experiment.description}
                      </p>
                      
                      <div class="flex flex-wrap gap-2 mb-6">
                        {experiment.technologies.map((tech) => (
                          <span class="bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-2 py-1 rounded text-xs group-hover:bg-macos-gray-200 dark:group-hover:bg-macos-gray-600 transition-colors">
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                    
                    <div class="flex gap-3 pt-4 border-t border-macos-gray-200 dark:border-macos-gray-700">
                      {experiment.githubUrl && (
                        <span class="text-macos-gray-600 dark:text-macos-gray-400 text-sm font-medium pointer-events-none">
                          View Code
                        </span>
                      )}
                      {experiment.demoUrl && (
                        <span class="text-macos-blue-500 dark:text-macos-blue-400 text-sm font-medium pointer-events-none">
                          Live Demo
                        </span>
                      )}
                    </div>
                  </div>
                </Window>
              </a>
            );
          })}
        </div>
        
        <!-- List (show up to 10) -->
        <div class="hidden flex-col gap-2" data-view-section="list">
          {allExperiments.slice(0, 10).map((experiment) => (
            <ProjectListItem 
              title={experiment.title}
              description={experiment.description}
              technologies={experiment.technologies}
              githubUrl={experiment.githubUrl}
              liveUrl={experiment.demoUrl}
              category={experiment.category}
            />
          ))}
        </div>
        
        <div class="text-center mt-12">
          <a 
            href="/experiments" 
            class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos inline-block"
          >
            View All Experiments
          </a>
        </div>
      </div>
    </section>

    <!-- Testimonials Section (Carousel) -->
    <section id="testimonials" data-ux-note="Social proof reduces decision friction." data-ux-side="left" class="py-20 px-6">
      <div class="max-w-4xl mx-auto">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-macos-gray-900 dark:text-white mb-4">Testimonials</h2>
          <p class="text-lg text-macos-gray-600 dark:text-macos-gray-400 max-w-2xl mx-auto">What collaborators and stakeholders say about working with me.</p>
        </div>
        <TestimonialsCarousel />
      </div>
    </section>

    <!-- Contact Section -->
  <section id="contact" data-ux-note="Trust grows through transparent communication." data-ux-side="right" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <Window title="Get In Touch" class="max-w-2xl mx-auto">
          <div class="text-center">
            <p class="text-macos-gray-600 dark:text-macos-gray-400 mb-8">
              I'm always interested in new opportunities and interesting projects. 
              Let's connect and discuss how we can work together!
            </p>
            
            <div class="flex flex-col sm:flex-row gap-4 justify-center flex-wrap">
              <!-- Email -->
              <a 
                href={`mailto:${personalInfo.email}`} 
                class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos inline-flex items-center justify-center"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
                Send Email
              </a>
              <!-- LinkedIn -->
              <a 
                href={personalInfo.linkedin} 
                target="_blank"
                rel="noopener noreferrer"
                class="bg-white/80 dark:bg-macos-gray-800/80 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/50 text-macos-gray-900 dark:text-white px-8 py-3 rounded-macos font-medium transition-colors hover:bg-white/90 dark:hover:bg-macos-gray-800/90 inline-flex items-center justify-center"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
                LinkedIn
              </a>
              <!-- GitHub -->
              <a 
                href={personalInfo.github} 
                target="_blank"
                rel="noopener noreferrer"
                class="bg-white/80 dark:bg-macos-gray-800/80 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/50 text-macos-gray-900 dark:text-white px-8 py-3 rounded-macos font-medium transition-colors hover:bg-white/90 dark:hover:bg-macos-gray-800/90 inline-flex items-center justify-center"
                aria-label="GitHub Profile"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path d="M12 0C5.37 0 0 5.37 0 12a12 12 0 008.21 11.44c.6.11.82-.26.82-.58l-.02-2.04c-3.34.73-4.04-1.42-4.04-1.42-.55-1.39-1.34-1.76-1.34-1.76-1.09-.75.08-.73.08-.73 1.2.08 1.84 1.24 1.84 1.24 1.07 1.83 2.81 1.3 3.49.99.11-.78.42-1.3.76-1.6-2.66-.3-5.47-1.33-5.47-5.93 0-1.31.47-2.38 1.24-3.19-.13-.3-.54-1.52.11-3.17 0 0 1.01-.32 3.31 1.23a11.5 11.5 0 013.02-.41c1.02 0 2.05.14 3.02.41 2.3-1.55 3.31-1.23 3.31-1.23.65 1.65.24 2.87.12 3.17.77.81 1.24 1.88 1.24 3.19 0 4.61-2.81 5.62-5.49 5.92.43.37.82 1.1.82 2.22l-.01 3.29c0 .32.21.7.82.58A12 12 0 0024 12c0-6.63-5.37-12-12-12z" />
                </svg>
                GitHub
              </a>
            </div>
          </div>
        </Window>
      </div>
    </section>

    <!-- Dock Navigation -->
    <Dock items={dockItems} />
  </main>
</Layout>

<script>
  // @ts-nocheck
  const HOME_VIEW_KEY = 'home:view';
  // @ts-ignore - inline script in .astro not picking up JSDoc param type reliably
  /** @type {(view: 'grid' | 'list') => void} */
  const applyHomeView = (view) => {
    const isGrid = view === 'grid';
    document.querySelectorAll('[data-view-section="grid"]').forEach(el => {
      el.classList.toggle('hidden', !isGrid);
    });
    document.querySelectorAll('[data-view-section="list"]').forEach(el => {
      el.classList.toggle('hidden', isGrid);
      el.classList.toggle('flex', !isGrid);
    });
    const gridBtn = document.querySelector('#home-view-toggle .grid-view');
    const listBtn = document.querySelector('#home-view-toggle .list-view');
    if (gridBtn && listBtn) {
      gridBtn.classList.toggle('active', isGrid);
      listBtn.classList.toggle('active', !isGrid);
      gridBtn.setAttribute('aria-pressed', String(isGrid));
      listBtn.setAttribute('aria-pressed', String(!isGrid));
      gridBtn.classList.toggle('text-macos-gray-800', isGrid);
      gridBtn.classList.toggle('dark:text-macos-gray-100', isGrid);
      listBtn.classList.toggle('text-macos-gray-800', !isGrid);
      listBtn.classList.toggle('dark:text-macos-gray-100', !isGrid);
    }
  };
  document.addEventListener('DOMContentLoaded', () => {
    const initial = localStorage.getItem(HOME_VIEW_KEY) || 'grid';
    applyHomeView(initial);
    document.querySelectorAll('#home-view-toggle .home-view-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const view = btn.getAttribute('data-view');
        if (!view) return;
        localStorage.setItem(HOME_VIEW_KEY, view);
        applyHomeView(view);
      });
    });

    // === Rotating hybrid titles animation ===
    const titleLine = document.getElementById('title-line');
    const roleRotator = document.getElementById('role-rotator');
    let roles = [];
    try { roles = JSON.parse(titleLine?.getAttribute('data-roles') || '[]'); } catch { roles = []; }
    let roleIdx = 0;
    if (roleRotator) {
      roleRotator.setAttribute('aria-live','polite');
      roleRotator.setAttribute('role','status');
    }
    const advanceRole = () => {
      if (!roleRotator || roles.length < 2) return;
      const next = (roleIdx + 1) % roles.length;
      // fade out
      roleRotator.classList.add('role-fade-out');
      setTimeout(() => {
        roleRotator.textContent = roles[next];
        roleIdx = next;
        roleRotator.classList.remove('role-fade-out');
        roleRotator.classList.add('role-fade-in');
        // cleanup after animation
        setTimeout(()=> roleRotator.classList.remove('role-fade-in'), 600);
      }, 250);
    };
    if (roles.length > 1) {
      setInterval(advanceRole, 4000); // every 4s
    }

    // Extra glitch burst randomness
    const avatar = document.querySelector('.glitch-avatar');
    if (avatar) {
      let burstTimer; let running=false;
      avatar.addEventListener('mouseenter', () => {
        if (running) return; running=true;
        const loop = () => {
          const delay = 500 + Math.random()*1200;
            burstTimer = setTimeout(()=> {
              avatar.classList.add('glitch-burst');
              setTimeout(()=> avatar.classList.remove('glitch-burst'), 180 + Math.random()*200);
              loop();
            }, delay);
        }; loop();
      });
      avatar.addEventListener('mouseleave', () => { running=false; clearTimeout(burstTimer); avatar.classList.remove('glitch-burst'); });
    }

  // Git activity flip card logic
  const flipCard = document.getElementById('tools-flip-card');
  const gitFlipBtn = document.getElementById('git-flip-btn');
  const gitBackBtn = document.getElementById('git-back-btn');
  const gitContent = document.getElementById('git-activity-content');
  const gitRefresh = document.getElementById('git-refresh');
  const gitChart = document.getElementById('git-activity-chart');
  const gitTotal = document.getElementById('git-activity-total');
  const GITHUB_USER = 'akhalizev';
  let eventsCache = null; let lastFetch = 0; let loading = false;
    const formatTimeAgo = (iso) => {
      try {
        const d = new Date(iso);
        const diff = (Date.now() - d.getTime()) / 1000;
        if (diff < 60) return `${Math.floor(diff)}s`;
        if (diff < 3600) return `${Math.floor(diff/60)}m`;
        if (diff < 86400) return `${Math.floor(diff/3600)}h`;
        return d.toLocaleDateString();
      } catch { return iso; }
    };
    const renderEvents = (events) => {
      if (!gitContent) return;
      gitContent.innerHTML = '';
      const commits = [];
      events.forEach(e => {
        if (e.type === 'PushEvent' && e.payload?.commits) {
          e.payload.commits.forEach(c => {
            commits.push({
              repo: e.repo.name,
              msg: c.message.split('\n')[0],
              sha: c.sha,
              time: e.created_at,
              url: `https://github.com/${e.repo.name}/commit/${c.sha}`
            });
          });
        }
      });
  renderChart(commits);
      commits.sort((a,b) => new Date(b.time) - new Date(a.time));
      const list = commits.slice(0, 15);
      if (!list.length) {
        gitContent.innerHTML = '<div class="text-macos-gray-400 dark:text-macos-gray-500">No recent public commits.</div>';
        return;
      }
      const ul = document.createElement('ul');
      ul.className = 'space-y-1.5';
      list.forEach(c => {
        const li = document.createElement('li');
        li.className = 'group border border-transparent hover:border-macos-gray-200 dark:hover:border-macos-gray-600 rounded-md transition-colors';
        const repoShort = c.repo.replace(/^[^/]+\//,'');
        const msg = c.msg.replace(/"/g,'&quot;');
        li.innerHTML = `<a href="${c.url}" target="_blank" rel="noopener noreferrer" class="block p-1.5">
          <div class="flex items-start justify-between gap-2">
            <span class="font-medium text-[10px] text-macos-blue-600 dark:text-macos-blue-400 truncate max-w-[150px] group-hover:underline">${repoShort}</span>
            <span class="text-[9px] text-macos-gray-400 dark:text-macos-gray-500 whitespace-nowrap">${formatTimeAgo(c.time)}</span>
          </div>
          <p class="mt-0.5 text-[10px] leading-snug text-macos-gray-700 dark:text-macos-gray-300 line-clamp-2">${msg}</p>
        </a>`;
        ul.appendChild(li);
      });
      gitContent.appendChild(ul);
    };
    const renderChart = (commits) => {
      if (!gitChart) return;
      // Prepare last 14 days buckets
      const days = [];
      const today = new Date();
      for (let i=13;i>=0;i--) {
        const d = new Date(today); d.setDate(d.getDate()-i);
        const key = d.toISOString().slice(0,10);
        days.push({ key, date: new Date(d.getFullYear(), d.getMonth(), d.getDate()), count:0 });
      }
      commits.forEach(c => {
        const dayKey = c.time.slice(0,10);
        const bucket = days.find(d => d.key === dayKey);
        if (bucket) bucket.count += 1;
      });
      const max = days.reduce((m,d)=> d.count>m?d.count:m,0);
      if (gitTotal) gitTotal.textContent = commits.length ? commits.length + ' commits' : '';
      gitChart.innerHTML = days.map(d => {
        const level = max === 0 ? 0 : Math.min(4, Math.round((d.count / max) * 4));
        const label = `${d.key}: ${d.count} commit${d.count!==1?'s':''}`;
        return `<div class="git-day level-${level}" data-count="${d.count}" aria-label="${label}" title="${label}"><span class="sr-only">${label}</span></div>`;
      }).join('');
    };
    const fetchEvents = async (force = false) => {
      if (loading) return;
      if (!force && eventsCache && Date.now() - lastFetch < 60000) { renderEvents(eventsCache); return; }
      loading = true;
      if (gitContent) gitContent.innerHTML = '<div class="animate-pulse text-macos-gray-400 dark:text-macos-gray-500">Loading‚Ä¶</div>';
      try {
        const res = await fetch(`https://api.github.com/users/${GITHUB_USER}/events/public`);
        if (!res.ok) throw new Error(String(res.status));
        const data = await res.json();
        eventsCache = data; lastFetch = Date.now();
        renderEvents(data);
      } catch (e) {
        if (gitContent) gitContent.innerHTML = '<div class="text-red-500 text-[10px]">Failed to load (rate limit?)</div>';
      } finally { loading = false; }
    };
  gitFlipBtn?.addEventListener('click', ()=> { if(!flipCard) return; flipCard.classList.add('flipped'); gitFlipBtn.setAttribute('aria-expanded','true'); if(!eventsCache) fetchEvents(); });
  gitBackBtn?.addEventListener('click', ()=> { if(!flipCard) return; flipCard.classList.remove('flipped'); gitFlipBtn?.setAttribute('aria-expanded','false'); });
  gitRefresh?.addEventListener('click', ()=> fetchEvents(true));
  // Attention pulse for Git button (drives discovery). Stops after first click or 20s.
  if (gitFlipBtn) {
    gitFlipBtn.classList.add('git-attn');
    const clearGitAttn = () => { gitFlipBtn.classList.remove('git-attn'); };
    gitFlipBtn.addEventListener('click', clearGitAttn, { once: true });
    gitFlipBtn.addEventListener('mouseenter', () => gitFlipBtn.classList.add('git-attn-hover'));
    gitFlipBtn.addEventListener('mouseleave', () => gitFlipBtn.classList.remove('git-attn-hover'));
    setTimeout(clearGitAttn, 15000); // auto-stop after 15s each load
  // Remove octocat intro class after first animation cycle ends (~2s) to prevent re-trigger by class reflows
    setTimeout(()=> {
      const octo = gitFlipBtn.querySelector('.octocat-anim-wrapper');
      if(octo){
        octo.classList.add('octo-rest');
        // Stop further animation without losing final position
        octo.style.animation='none';
      }
      // Keep git-octocat-intro class to avoid reverting starting styles (prevents left jump)
    }, 2900);
    // Hard fallback to enforce right parking after potential layout shifts
    setTimeout(()=> {
      const octo = gitFlipBtn.querySelector('.octocat-anim-wrapper.octo-rest');
      if(octo){
        octo.classList.add('octo-rest-force');
        octo.setAttribute('data-octo-final','true');
        // Ensure it retains animation's computed left
        (octo as HTMLElement).style.right='auto';
      }
    }, 3200);
  }
    // === UX side gutter quotes logic (re-added) ===
    const uxSections = Array.from(document.querySelectorAll('section[data-ux-note]'));
    const clamp = (n, min, max) => n < min ? min : (n > max ? max : n);
    function updateUxNoteVertical() {
      uxSections.forEach(sec => {
        // Center by default; could adapt per section height if desired
        sec.style.setProperty('--ux-note-top', '50%');
      });
    }
    function updateUxNoteShift() {
      const vh = window.innerHeight;
      uxSections.forEach(sec => {
        const r = sec.getBoundingClientRect();
        if (r.bottom < 0 || r.top > vh) {
          sec.classList.remove('ux-note-visible');
          return;
        }
        // Make visible once it enters viewport
        sec.classList.add('ux-note-visible');
        // Parallax-esque subtle shift: map section center to -40..40px
        const center = r.top + r.height/2;
        const ratio = (center - vh/2) / (vh/2); // -1..1
        const shift = clamp(ratio * 40, -40, 40);
        sec.style.setProperty('--ux-note-shift', shift.toFixed(1)+'px');
      });
    }
    updateUxNoteVertical();
    updateUxNoteShift();
    window.addEventListener('scroll', updateUxNoteShift, { passive: true });
    window.addEventListener('resize', () => { updateUxNoteVertical(); updateUxNoteShift(); });

    // Global skill tooltip portal
    (function setupSkillTooltipPortal(){
      const SOURCE_SELECTOR = '.skill-chip';
      let portal = document.getElementById('global-skill-tooltip');
      if(!portal){
        portal = document.createElement('div');
        portal.id='global-skill-tooltip';
        const baseStyle = [
          'position:fixed',
          'z-index:9999',
          'opacity:0',
          'transform:translateY(-4px)',
          'transition:opacity .14s ease, transform .14s ease',
          'background:rgba(255,255,255,0.92)',
          'border:1px solid rgba(0,0,0,0.06)',
          'border-radius:12px',
          'padding:0.65rem 0.75rem 0.6rem',
          'box-shadow:0 8px 32px -10px rgba(0,0,0,0.35),0 4px 14px -4px rgba(0,0,0,0.22)',
          'font-size:11.5px',
          'line-height:1.35',
          'font-weight:500',
          'color:#1e293b',
          'letter-spacing:.2px',
          'backdrop-filter:blur(10px) saturate(1.4)',
          'max-width:22rem',
          'pointer-events:none'
        ].join(';');
        portal.setAttribute('style', baseStyle);
        const arrow = document.createElement('div'); arrow.className='gst-arrow';
        arrow.setAttribute('style', [
          'position:absolute','width:18px','height:11px','left:50%','top:100%','transform:translateX(-50%)'
        ].join(';'));
        const arrowInner = document.createElement('div');
        arrowInner.setAttribute('style', 'position:absolute;inset:0;background:inherit;clip-path:path("M0 0 L18 0 L9 11 Z");filter:drop-shadow(0 2px 3px rgba(0,0,0,0.25))');
        arrow.appendChild(arrowInner);
        portal.appendChild(arrow);
        const inner = document.createElement('div'); inner.className='gst-inner';
        inner.setAttribute('style','position:relative;padding-left:0.4rem');
        portal.appendChild(inner);
        const accent = document.createElement('div');
        accent.setAttribute('style','content:"";position:absolute;left:0;top:0;height:100%;width:3px;border-radius:2px;background:linear-gradient(to bottom,#3b82f6,transparent 85%);opacity:.6;');
        inner.appendChild(accent);
        const textHolder = document.createElement('div'); textHolder.className='gst-text'; inner.appendChild(textHolder);
        document.body.appendChild(portal);
      }
  const innerEl = portal.querySelector('.gst-text');
      let active=null; let hideT;
      function position(chip){
        if(!portal || !innerEl) return;
        const rect = chip.getBoundingClientRect();
        portal.dataset.flipped='false';
        portal.style.maxWidth='22rem';
        portal.style.left='0px'; portal.style.top='0px'; portal.style.visibility='hidden';
        requestAnimationFrame(()=>{
          const pw = portal.offsetWidth; const ph = portal.offsetHeight; const gap=10;
          let left = rect.left + rect.width/2 - pw/2; left = Math.max(8, Math.min(window.innerWidth - pw - 8, left));
          let top = rect.top - ph - gap; if(top < 8){ top = rect.bottom + gap; portal.dataset.flipped='true'; }
          portal.style.left=left+'px'; portal.style.top=top+'px'; portal.style.visibility='visible';
        });
      }
      function show(chip){
        clearTimeout(hideT); active=chip;
        const txt = chip.querySelector('.skill-tooltip')?.textContent || chip.textContent?.trim();
        if(innerEl) innerEl.textContent = txt || '';
        // AI theme if inside AI column
        if(chip.closest('.ai-tech-col')) {
          portal.classList.add('ai-theme');
          // Apply AI gradient inline to override scoped CSS not present
          portal.style.background='linear-gradient(135deg, rgba(30,64,175,0.9), rgba(29,78,216,0.92) 55%, rgba(56,189,248,0.65))';
          portal.style.color='#f1f5f9';
          const accentBar = portal.querySelector('.gst-inner > div');
          if(accentBar) (accentBar as HTMLElement).style.background='linear-gradient(to bottom,#93c5fd,transparent 85%)';
        } else {
          portal.classList.remove('ai-theme');
          portal.style.background='rgba(255,255,255,0.92)';
          portal.style.color='#1e293b';
          const accentBar = portal.querySelector('.gst-inner > div');
          if(accentBar) (accentBar as HTMLElement).style.background='linear-gradient(to bottom,#3b82f6,transparent 85%)';
        }
        position(chip); portal.style.opacity='1'; portal.style.transform='translateY(0)';
      }
      function hide(){ portal.style.opacity='0'; portal.style.transform='translateY(-4px)'; active=null; }
      function scheduleHide(){ hideT = setTimeout(hide, 100); }
      const chips = Array.from(document.querySelectorAll(SOURCE_SELECTOR));
      chips.forEach(chip=>{
        chip.addEventListener('mouseenter', ()=> show(chip));
        chip.addEventListener('focus', ()=> show(chip));
        chip.addEventListener('mouseleave', scheduleHide);
        chip.addEventListener('blur', scheduleHide);
        chip.addEventListener('keydown', e=> { if(e.key==='Escape') hide(); });
      });
      window.addEventListener('scroll', ()=> { if(active) position(active); }, { passive:true });
      window.addEventListener('resize', ()=> { if(active) position(active); });
      document.body.classList.add('skill-tooltips-portal-active');
    })();
    // Fallback: if portal not active after 1s, re-enable inline tooltips
    setTimeout(()=>{
      if(!document.getElementById('global-skill-tooltip')){
        document.querySelectorAll('.skill-tooltip').forEach(el=>{ el.removeAttribute('style'); el.classList.remove('hidden'); });
        document.body.classList.add('skill-tooltips-fallback');
      }
    })();
  });
</script>

<style>
  /* Side gutter UX concept sentences */
  section[data-ux-note] { position: relative; }
  section[data-ux-note] > * { position: relative; z-index: 1; }
  section[data-ux-note]::before {
    content: attr(data-ux-note);
    position: absolute;
    top: var(--ux-note-top, 45%); /* adaptive via JS */
    transform: translateY(calc(-50% + var(--ux-note-shift, 0px)));
    font-size: 0.7rem;
    line-height: 1.25;
    max-width: 14ch;
    font-weight: 500;
    letter-spacing: 0.05em;
    text-transform: none;
    opacity: 0;
    color: rgba(0,0,0,0.25);
    font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "SF Pro Text", "Helvetica Neue", Arial, sans-serif;
    pointer-events: none;
    user-select: none;
    transition: opacity 1s ease, transform .6s ease-out;
    padding-inline: .5rem;
    text-align: left;
  }
  section[data-ux-note][data-ux-side="left"]::before { left: max(1.25rem, calc(env(safe-area-inset-left) + 0.75rem)); }
  section[data-ux-note][data-ux-side="right"]::before { right: max(1.25rem, calc(env(safe-area-inset-right) + 0.75rem)); text-align: right; }
  .dark section[data-ux-note]::before { color: rgba(255,255,255,0.28); }
  section[data-ux-note].ux-note-visible::before { opacity: 1; }
  @media (max-width: 900px) {
    /* Hide gutter sentences on smaller viewports to avoid crowding */
    section[data-ux-note]::before { display: none; }
  }
  @media (min-width: 1600px) {
    section[data-ux-note]::before { font-size: 0.75rem; max-width: 16ch; }
  }
  @media (prefers-reduced-motion: reduce) {
    section[data-ux-note]::before { transition: opacity .6s ease !important; }
  }
</style>
<style>
  /* Flip card styles for Tools section */
  .perspective-1200 { perspective: 1200px; }
  .flip-card-inner { position: relative; transform-style: preserve-3d; }
  .flip-card-inner.flipped { transform: rotateY(180deg); }
  .flip-card-inner, .flip-card-inner.flipped { transition-property: transform; transition-duration: .75s; }
  .flip-face { backface-visibility: hidden; -webkit-backface-visibility: hidden; }
  .flip-front { position: relative; }
  .flip-back { position: absolute; inset: 0; transform: rotateY(180deg); display: flex; }
  .flip-wrapper { min-height: 190px; }
  /* Ensure flip card (Tools column) tooltips overlay later columns */
  .flip-wrapper { position: relative; }
  /* Scrollbar inside activity panel */
  #git-activity-content.custom-scrollbar { scrollbar-width: thin; scrollbar-color: rgba(100,116,139,0.35) transparent; }
  #git-activity-content.custom-scrollbar::-webkit-scrollbar { width: 8px; }
  #git-activity-content.custom-scrollbar::-webkit-scrollbar-track { background: transparent; }
  #git-activity-content.custom-scrollbar::-webkit-scrollbar-thumb { background: rgba(100,116,139,0.35); border-radius: 999px; }
  #git-activity-content.custom-scrollbar::-webkit-scrollbar-thumb:hover { background: rgba(100,116,139,0.55); }
  #git-activity-content .line-clamp-2 { display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
  /* Rotating role animation */
  #role-rotator { position: relative; display: inline-block; transition: opacity .25s ease, transform .25s ease; }
  #role-rotator.role-fade-out { opacity: 0; transform: translateY(-0.35em); }
  #role-rotator.role-fade-in { animation: roleFadeIn .45s ease; }
  @keyframes roleFadeIn { 0% { opacity:0; transform: translateY(0.35em);} 100% { opacity:1; transform: translateY(0);} }
  /* Glitch avatar effect */
  .glitch-avatar { position: relative; }
  .glitch-avatar picture, .glitch-avatar img { position: relative; z-index: 2; }
  .glitch-avatar::before, .glitch-avatar::after { content:''; position:absolute; inset:0; background: var(--avatar-url) center/cover no-repeat; opacity:0; mix-blend-mode:screen; pointer-events:none; will-change:transform, clip-path, filter; }
  .glitch-avatar::before { filter: hue-rotate(30deg) saturate(2) brightness(1.15); }
  .glitch-avatar::after { filter: hue-rotate(-35deg) saturate(2.2) brightness(1.1); }
  .glitch-avatar:hover { filter: contrast(1.2) saturate(1.15); }
  .glitch-avatar:hover::before, .glitch-avatar:hover::after { opacity:.65; animation: avatarGlitchSlices 1s steps(3,end) infinite, avatarHue 6s linear infinite; }
  .glitch-avatar:hover::after { animation-duration:1.15s, 6s; animation-delay:.1s, 0s; }
  .glitch-avatar:hover img { animation: avatarJitter 1.5s ease-in-out infinite; }
  .glitch-avatar.glitch-burst::before, .glitch-avatar.glitch-burst::after { animation-duration:0.55s, 6s; }
  .glitch-avatar .glitch-overlay { position:absolute; inset:0; background: repeating-linear-gradient(to bottom, rgba(255,255,255,0.05) 0 2px, transparent 2px 4px); mix-blend-mode:overlay; opacity:0; pointer-events:none; z-index:3; }
  .glitch-avatar:hover .glitch-overlay { animation: scanlines 4s linear infinite; opacity:0.4; }
  @keyframes scanlines { 0% { transform:translateY(0); } 100% { transform:translateY(4px); } }
  @keyframes avatarHue { 0% { filter:hue-rotate(0deg); } 100% { filter:hue-rotate(360deg); } }
  @keyframes avatarGlitchSlices {
    0% { transform:translate(0,0) skew(0deg); clip-path:inset(0 0 0 0); }
    7% { transform:translate(-4px,1px) skew(-2deg); clip-path:inset(5% 0 60% 0); }
    14% { transform:translate(3px,-2px) skew(2deg); clip-path:inset(55% 0 8% 0); }
    21% { transform:translate(-2px,3px) skew(-3deg); clip-path:inset(12% 0 35% 0); }
    28% { transform:translate(5px,-1px) skew(1deg); clip-path:inset(38% 0 25% 0); }
    35% { transform:translate(-6px,0) skew(0deg); clip-path:inset(18% 0 40% 0); }
    48% { transform:translate(4px,2px) skew(-1deg); clip-path:inset(30% 0 15% 0); }
    60% { transform:translate(-3px,-2px) skew(1deg); clip-path:inset(50% 0 20% 0); }
    72% { transform:translate(6px,1px) skew(-2deg); clip-path:inset(8% 0 55% 0); }
    84% { transform:translate(-5px,-3px) skew(2deg); clip-path:inset(45% 0 10% 0); }
    100% { transform:translate(0,0) skew(0deg); clip-path:inset(0 0 0 0); }
  }
  @keyframes avatarJitter { 0%,100% { transform:translate(0,0); filter:none; } 10% { transform:translate(.8px,-.6px); } 20% { transform:translate(-1px,.9px); } 30% { transform:translate(1.1px,-1.1px); } 40% { transform:translate(-.8px,.5px); } 50% { transform:translate(.6px,-.4px); filter:brightness(1.05); } 60% { transform:translate(-1.2px,.7px); } 70% { transform:translate(.9px,-.9px); } 80% { transform:translate(-.7px,.4px); } 90% { transform:translate(.5px,-.5px); } }
  @media (prefers-reduced-motion: reduce) { .glitch-avatar:hover::before, .glitch-avatar:hover::after, .glitch-avatar:hover img, .glitch-avatar .glitch-overlay { animation: none !important; opacity:0 !important; } }
  /* Git activity mini chart */
  .git-activity-chart { display: grid; grid-auto-flow: column; grid-template-rows: repeat(2, 10px); gap: 3px 4px; align-items: center; }
  .git-day { width: 14px; height: 10px; border-radius: 2px; background: var(--git-l0); position: relative; }
  .git-day.level-0 { --git-bg: var(--git-l0); }
  .git-day.level-1 { --git-bg: var(--git-l1); }
  .git-day.level-2 { --git-bg: var(--git-l2); }
  .git-day.level-3 { --git-bg: var(--git-l3); }
  .git-day.level-4 { --git-bg: var(--git-l4); }
  .git-day { background: var(--git-bg); transition: background .25s ease, transform .2s ease; cursor: default; }
  .git-day:hover { transform: scale(1.35); z-index: 10; }
  .git-legend-box { width: 10px; height: 10px; border-radius: 2px; background: var(--git-l0); }
  .git-legend-box.level-0 { background: var(--git-l0); }
  .git-legend-box.level-1 { background: var(--git-l1); }
  .git-legend-box.level-2 { background: var(--git-l2); }
  .git-legend-box.level-3 { background: var(--git-l3); }
  .git-legend-box.level-4 { background: var(--git-l4); }
  :root { --git-l0: rgba(148,163,184,0.18); --git-l1: #cfe1ff; --git-l2: #9ec5ff; --git-l3: #5aa5ff; --git-l4: #1d72e7; }
  .dark :root, .dark { --git-l0: rgba(100,116,139,0.18); --git-l1: #1e3a8a; --git-l2: #1d4ed8; --git-l3: #2563eb; --git-l4: #3b82f6; }
  .git-activity-chart-wrapper { background: linear-gradient(to bottom, rgba(0,0,0,0.02), rgba(0,0,0,0)); }
  /* Git attention pulse */
  @keyframes gitPulseRing { 0% { transform:scale(.94); opacity:.34;} 70% { transform:scale(1.24); opacity:0;} 100% { opacity:0;} }
  @keyframes gitPulseGlow { 0%,100% { box-shadow:0 0 0 0 rgba(59,130,246,0.25);} 50% { box-shadow:0 0 0 4px rgba(59,130,246,0); } }
  #git-flip-btn.git-attn { position:relative; }
  #git-flip-btn.git-attn::after, #git-flip-btn.git-attn::before { content:""; position:absolute; inset:0; border-radius:inherit; pointer-events:none; }
  #git-flip-btn.git-attn::before { animation: gitPulseGlow 2.8s ease-in-out infinite; }
  #git-flip-btn.git-attn::after { border:2px solid rgba(59,130,246,0.42); animation: gitPulseRing 2.1s ease-out infinite; border-radius:inherit; }
  #git-flip-btn.git-attn-hover::after { border-color:rgba(255,255,255,0.9); }
  .dark #git-flip-btn.git-attn::after { border-color:rgba(96,165,250,0.45); }
  .dark #git-flip-btn.git-attn::before { animation: gitPulseGlow 2.8s ease-in-out infinite; }
  /* Octocat traverse animation (mascot physically moves across width using left positioning) */
  @keyframes octoTraverse {
    0% { left:-2.2rem; transform:translateY(-50%) rotate(-10deg); opacity:0; }
    10% { opacity:1; }
    45% { left:0.3rem; transform:translateY(-50%) rotate(0deg); }
    70% { left:calc(100% - 2.2rem); transform:translateY(-50%) rotate(6deg); }
    82% { left:calc(100% - 2.6rem); transform:translateY(-50%) rotate(0deg); }
    92% { left:calc(100% - 2.3rem); transform:translateY(-50%) rotate(3deg); }
    100% { left:calc(100% - 2.2rem); transform:translateY(-50%) rotate(0deg); opacity:1; }
  }
  @keyframes octoTrailFade { 0% { opacity:.38; transform:translateX(-5%) scaleX(.85);} 55% { opacity:.18; } 100% { opacity:0; transform:translateX(25%) scaleX(1);} }
  #git-flip-btn.git-octocat-intro { --octo-delay: .25s; position:relative; }
  #git-flip-btn.git-octocat-intro .git-label { position:relative; }
  #git-flip-btn.git-octocat-intro .octocat-anim-wrapper { position:absolute; top:50%; left:-2.2rem; width:1.25rem; height:1.25rem; display:flex; align-items:center; justify-content:center; animation: octoTraverse 2s cubic-bezier(.65,.1,.25,1) var(--octo-delay) forwards; will-change:left, transform; }
  #git-flip-btn.git-octocat-intro .octocat-anim { opacity:0; animation: octoIconFade 2s linear var(--octo-delay) forwards; filter:drop-shadow(0 1px 1px rgba(0,0,0,0.25)); }
  @keyframes octoIconFade { 0% { opacity:0; } 12% { opacity:1; } 100% { opacity:1; } }
  #git-flip-btn.git-octocat-intro .octocat-track::before { content:""; position:absolute; left:0; top:50%; height:2px; width:100%; background:linear-gradient(90deg, rgba(59,130,246,0.0), rgba(59,130,246,0.45) 18%, rgba(59,130,246,0.0)); transform:translateY(-50%); animation: octoTrailFade 2.1s ease var(--octo-delay) forwards; pointer-events:none; }
  /* Delay label reveal for focus on mascot */
  #git-flip-btn.git-octocat-intro .git-label { opacity:0; animation: gitLabelIn .55s ease 1.35s forwards; }
  /* Rest state: keep Octocat parked on right side after traverse */
  #git-flip-btn .octocat-anim-wrapper.octo-rest, #git-flip-btn .octocat-anim-wrapper.octo-rest-force { left:calc(100% - 2.2rem) !important; right:auto !important; transform:translateY(-50%) rotate(0deg) !important; animation:none !important; }
  #git-flip-btn .octocat-anim-wrapper.octo-rest .octocat-anim, #git-flip-btn .octocat-anim-wrapper.octo-rest-force .octocat-anim { opacity:1 !important; animation:none !important; }
  @keyframes gitLabelIn { 0% { opacity:0; filter:blur(3px); transform:translateX(6px);} 100% { opacity:1; filter:none; transform:translateX(0);} }
  /* Respect reduced motion */
  @media (prefers-reduced-motion: reduce) {
    #git-flip-btn.git-octocat-intro .octocat-anim, #git-flip-btn.git-octocat-intro .git-label { animation:none !important; opacity:1 !important; transform:none !important; }
    #git-flip-btn.git-octocat-intro .octocat-track::before { display:none; }
  }
  /* Dark mode adjustments */
  .dark #git-flip-btn.git-octocat-intro .octocat-track::before { background:linear-gradient(90deg, rgba(96,165,250,0.0), rgba(96,165,250,0.45) 20%, rgba(96,165,250,0.0)); }
  /* Skill tooltips */
  .skill-chip { cursor: default; position:relative; }
  /* Hide inline tooltip content; portal will read it */
  .skill-tooltip { display:none !important; }
  #global-skill-tooltip { background:rgba(255,255,255,0.92); border:1px solid rgba(0,0,0,0.06); border-radius:.75rem; padding:.65rem .75rem .6rem; box-shadow:0 8px 32px -10px rgba(0,0,0,0.35), 0 4px 14px -4px rgba(0,0,0,0.22); font-size:11.5px; line-height:1.35; font-weight:500; color:#1e293b; letter-spacing:.2px; backdrop-filter:blur(10px) saturate(1.4); max-width:22rem; pointer-events:none; --tip-accent: #3b82f6; position:fixed; }
  .dark #global-skill-tooltip { background:rgba(30,41,59,0.88); color:rgba(255,255,255,0.9); border-color:rgba(255,255,255,0.08); --tip-accent:#60a5fa; }
  #global-skill-tooltip.ai-theme { background:linear-gradient(135deg, rgba(30,64,175,0.9), rgba(29,78,216,0.92) 55%, rgba(56,189,248,0.65)); color:#f1f5f9; border-color:rgba(255,255,255,0.15); --tip-accent:#93c5fd; }
  #global-skill-tooltip.ai-theme .gst-inner { text-shadow:0 1px 2px rgba(0,0,0,0.35); }
  #global-skill-tooltip .gst-inner { position:relative; }
  #global-skill-tooltip .gst-inner::before { content:""; position:absolute; left:0; top:0; height:100%; width:3px; border-radius:2px; background:linear-gradient(to bottom, var(--tip-accent), transparent 85%); opacity:.6; }
  #global-skill-tooltip .gst-arrow { position:absolute; width:18px; height:11px; left:50%; transform:translateX(-50%); top:100%; }
  #global-skill-tooltip .gst-arrow::before { content:""; position:absolute; inset:0; background:inherit; clip-path:path('M0 0 L18 0 L9 11 Z'); filter:drop-shadow(0 2px 3px rgba(0,0,0,0.25)); }
  #global-skill-tooltip[data-flipped='true'] .gst-arrow { top:auto; bottom:100%; }
  #global-skill-tooltip[data-flipped='true'] .gst-arrow::before { clip-path:path('M0 11 L18 11 L9 0 Z'); }
  @media (prefers-reduced-motion: reduce) { #global-skill-tooltip { transition:none !important; } }
  body.skill-tooltips-portal-active { --skill-tooltip-mode: portal; }
  body.skill-tooltips-fallback { --skill-tooltip-mode: inline; }
</style>
