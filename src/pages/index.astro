---
import Layout from '../layouts/Layout.astro';
import { personalInfo } from '../utils/personal';
import Window from '../components/Window.astro';
import ProjectCard from '../components/ProjectCard.astro';
import Dock from '../components/Dock.astro';
import ProjectListItem from '../components/ProjectListItem.astro';
import { experiments as allExperiments } from '../utils/experimentsData';

// Personalization (update these values as needed)
const me = {
  name: 'Anatoly Khalizev',
  title: 'Senior UX Designer', // Primary / core title
  // Secondary / rotating modern hybrid titles (feel free to edit / reorder)
  roles: [
    'Design Engineer',
    'AI Interaction Architect',
    'Creative Technologist',
    'AI-enhanced Product Designer'
  ],
  tagline: 'I craft reliable, elegant software and love turning ideas into polished products.',
  photo: '/anatoly.png', // Place your profile photo at public/anatoly.png (square ~640x640). Optional: add /anatoly.webp for smaller size.
};

// Sample project data - this will be replaced with dynamic data later
const projects = [
  {
    title: "Sample Project 1",
    description: "A beautiful web application built with modern technologies and best practices.",
    image: "/api/placeholder/400/300",
    technologies: ["React", "TypeScript", "Tailwind"],
    githubUrl: "https://github.com",
    liveUrl: "https://example.com",
    category: "Web Development"
  },
  {
    title: "Sample Project 2", 
    description: "An innovative mobile app that solves real-world problems with elegant design.",
    image: "/api/placeholder/400/300",
    technologies: ["React Native", "Node.js", "MongoDB"],
    githubUrl: "https://github.com",
    category: "Mobile Development"
  },
  {
    title: "Sample Project 3",
    description: "A data visualization dashboard with interactive charts and real-time updates.",
    technologies: ["Vue.js", "D3.js", "Python"],
    githubUrl: "https://github.com",
    liveUrl: "https://example.com",
    category: "Data Science"
  }
];

const dockItems = [
  { name: "About", icon: "üë§", href: "#about" },
  { name: "Projects", icon: "üíº", href: "#projects" },
  { name: "Skills", icon: "üõ†Ô∏è", href: "#skills" },
  { name: "Experiments", icon: "üß™", href: "/experiments" },
  { name: "Contact", icon: "üìß", href: "#contact" }
];
---

<Layout title={`Portfolio - ${me.name}`}>
  <main class="min-h-screen bg-gradient-to-br from-macos-blue-500/5 to-macos-gray-100 dark:from-macos-gray-900 dark:to-macos-gray-800">
  <!-- Hero Section -->
  <section data-ux-note="Consistency builds intuitive interfaces." data-ux-side="left" class="relative h-screen flex items-center justify-center px-6">
      <div class="text-center max-w-4xl mx-auto">
        <div class="mb-10 relative">
          <div class="w-40 h-40 mx-auto mb-6 rounded-full shadow-macos-lg ring-4 ring-white/70 dark:ring-macos-gray-800/80 overflow-hidden bg-gradient-to-br from-macos-blue-500 to-macos-blue-600 flex items-center justify-center">
            <!-- Responsive avatar -->
            <picture>
              <!-- Future: add WebP sources if available -->
              <source srcset="/anatoly-256.png 256w, /anatoly-512.png 512w, /anatoly.png 1024w" sizes="160px" />
              <img 
                src={me.photo} 
                alt={`${me.name} portrait`} 
                loading="eager" 
                width="640" height="640"
                class="w-full h-full object-cover" 
                style="object-position:center;" 
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'" />
            </picture>
            <div class="hidden w-full h-full items-center justify-center text-5xl text-white font-semibold select-none">
              {me.name.split(' ').map(p=>p[0]).slice(0,2).join('')}
            </div>
          </div>
        </div>

        <h1 class="text-5xl md:text-7xl font-bold text-macos-gray-900 dark:text-white mb-6 tracking-tight">
          {me.name}
        </h1>

        <p id="title-line" data-roles={JSON.stringify(me.roles)} class="text-xl md:text-2xl text-macos-gray-700 dark:text-macos-gray-300 mb-6 font-medium flex flex-col gap-1 md:block md:space-x-2">
          <span>{me.title}</span>
          <span class="before:content-['‚Ä¢'] before:mx-2 hidden md:inline" aria-hidden="true"></span>
          <span class="text-macos-blue-600 dark:text-macos-blue-400 inline-block" id="role-rotator">{me.roles[0]}</span>
        </p>

        <p class="text-lg text-macos-gray-500 dark:text-macos-gray-500 max-w-2xl mx-auto mb-12 leading-relaxed">
          {me.tagline}
        </p>
        
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="#projects" 
            class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos"
          >
            View My Work
          </a>
          <a 
            href="#contact" 
            class="bg-white/80 dark:bg-macos-gray-800/80 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/50 text-macos-gray-900 dark:text-white px-8 py-3 rounded-macos font-medium transition-colors hover:bg-white/90 dark:hover:bg-macos-gray-800/90"
          >
            Get In Touch
          </a>
        </div>
      </div>
    </section>

    <!-- About Section -->
  <section id="about" data-ux-note="Clarity emerges from purposeful constraints." data-ux-side="right" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <Window title="About Me" class="max-w-4xl mx-auto">
          <div class="prose prose-lg dark:prose-invert max-w-none">
            <p class="text-macos-gray-600 dark:text-macos-gray-400 leading-relaxed">
              I'm a passionate developer with expertise in modern web technologies. 
              I love building applications that are not only functional but also provide 
              an exceptional user experience. My approach combines technical excellence 
              with thoughtful design to create solutions that truly make a difference.
            </p>
            
            <div class="grid md:grid-cols-3 gap-6 mt-8">
              <div class="text-center">
                <div class="text-3xl mb-2">üéØ</div>
                <h3 class="font-semibold text-macos-gray-900 dark:text-white mb-2">Problem Solver</h3>
                <p class="text-sm text-macos-gray-600 dark:text-macos-gray-400">
                  I enjoy tackling complex challenges and finding elegant solutions.
                </p>
              </div>
              
              <div class="text-center">
                <div class="text-3xl mb-2">üöÄ</div>
                <h3 class="font-semibold text-macos-gray-900 dark:text-white mb-2">Innovation Focused</h3>
                <p class="text-sm text-macos-gray-600 dark:text-macos-gray-400">
                  Always exploring new technologies and methodologies.
                </p>
              </div>
              
              <div class="text-center">
                <div class="text-3xl mb-2">ü§ù</div>
                <h3 class="font-semibold text-macos-gray-900 dark:text-white mb-2">Team Player</h3>
                <p class="text-sm text-macos-gray-600 dark:text-macos-gray-400">
                  Collaborative approach to building great products.
                </p>
              </div>
            </div>
          </div>
        </Window>
      </div>
    </section>

    <!-- Projects Section -->
  <section id="projects" data-ux-note="Prioritize hierarchy to guide attention." data-ux-side="left" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-8">
          <h2 class="text-4xl font-bold text-macos-gray-900 dark:text-white mb-3">
            Featured Projects
          </h2>
          <p class="text-lg text-macos-gray-600 dark:text-macos-gray-400">
            A collection of my recent work and side projects
          </p>
        </div>

        <!-- View Toggle (controls both Projects and Experiments) -->
        <div class="flex justify-center mb-8">
          <div class="flex items-center gap-2 bg-white/70 dark:bg-macos-gray-800/70 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/40 rounded-macos px-2 py-1 shadow-macos" id="home-view-toggle" role="group" aria-label="Toggle view mode">
            <button type="button" class="home-view-btn grid-view active inline-flex items-center gap-2 px-3 py-1.5 rounded-md text-sm text-macos-gray-800 dark:text-macos-gray-100 hover:bg-macos-gray-100 dark:hover:bg-macos-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-macos-blue-500" aria-pressed="true" data-view="grid">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M3 3h8v8H3V3zm10 0h8v8h-8V3zM3 13h8v8H3v-8zm10 0h8v8h-8v-8z"/></svg>
              Grid
            </button>
            <button type="button" class="home-view-btn list-view inline-flex items-center gap-2 px-3 py-1.5 rounded-md text-sm text-macos-gray-700 dark:text-macos-gray-300 hover:bg-macos-gray-100 dark:hover:bg-macos-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-macos-blue-500" aria-pressed="false" data-view="list">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M4 6h16v2H4V6zm0 5h16v2H4v-2zm0 5h16v2H4v-2z"/></svg>
              List
            </button>
          </div>
        </div>
        
        <!-- Grid (keep existing count) -->
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8" data-view-section="grid">
          {projects.map((project) => (
            <ProjectCard {...project} />
          ))}
        </div>
        
        <!-- List (show up to 10) -->
        <div class="hidden flex-col gap-2" data-view-section="list">
          {projects.slice(0, 10).map((project) => (
            <ProjectListItem {...project} />
          ))}
        </div>
        
        <div class="text-center mt-12">
          <a 
            href="/projects" 
            class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos inline-block"
          >
            View All Projects
          </a>
        </div>
      </div>
    </section>

    <!-- Skills Section -->
  <section id="skills" data-ux-note="Clear affordances reduce friction." data-ux-side="right" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <Window title="Skills & Technologies" class="max-w-4xl mx-auto">
          <div class="grid md:grid-cols-3 gap-8">
            <div>
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">Frontend</h3>
              <div class="space-y-2">
                {["React", "Vue.js", "TypeScript", "Tailwind CSS", "Next.js"].map((skill) => (
                  <div class="bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm">
                    {skill}
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">Backend</h3>
              <div class="space-y-2">
                {["Node.js", "Python", "PostgreSQL", "MongoDB", "Express"].map((skill) => (
                  <div class="bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm">
                    {skill}
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h3 class="text-xl font-semibold text-macos-gray-900 dark:text-white mb-4">Tools</h3>
              <div class="space-y-2">
                {["Git", "Docker", "AWS", "Figma", "VS Code"].map((skill) => (
                  <div class="bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-3 py-2 rounded-md text-sm">
                    {skill}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </Window>
      </div>
    </section>

    <!-- Experiments Section -->
  <section id="experiments" data-ux-note="Exploration fuels innovation." data-ux-side="left" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-12">
          <h2 class="text-4xl font-bold text-macos-gray-900 dark:text-white mb-4">
            Experiments & Research
          </h2>
          <p class="text-lg text-macos-gray-600 dark:text-macos-gray-400">
            Exploring new technologies, concepts, and creative solutions
          </p>
        </div>
        
        <!-- Grid (keep existing count: 4) -->
        <div class="grid md:grid-cols-2 gap-8" data-view-section="grid">
          {allExperiments.slice(0, 4).map((experiment) => (
            <Window title={experiment.title} class="h-full">
              <div class="h-full flex flex-col">
                <div class="flex-1">
                  <div class="flex items-center justify-between mb-4">
                    <span class="text-sm font-medium text-macos-blue-500 dark:text-macos-blue-400">
                      {experiment.category}
                    </span>
                    <span class={`text-xs px-2 py-1 rounded-full font-medium ${
                      experiment.status === 'Complete' 
                        ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400'
                        : experiment.status === 'In Progress'
                        ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'
                        : experiment.status === 'Prototype'
                        ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400'
                        : 'bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-400'
                    }`}>
                      {experiment.status}
                    </span>
                  </div>
                  
                  <p class="text-macos-gray-600 dark:text-macos-gray-400 mb-4 leading-relaxed">
                    {experiment.description}
                  </p>
                  
                  <div class="flex flex-wrap gap-2 mb-6">
                    {experiment.technologies.map((tech) => (
                      <span class="bg-macos-gray-100 dark:bg-macos-gray-700 text-macos-gray-700 dark:text-macos-gray-300 px-2 py-1 rounded text-xs">
                        {tech}
                      </span>
                    ))}
                  </div>
                </div>
                
                <div class="flex gap-3 pt-4 border-t border-macos-gray-200 dark:border-macos-gray-700">
                  {experiment.githubUrl && (
                    <a 
                      href={experiment.githubUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-macos-gray-600 dark:text-macos-gray-400 hover:text-macos-blue-500 dark:hover:text-macos-blue-400 transition-colors text-sm font-medium"
                    >
                      View Code
                    </a>
                  )}
                  {experiment.demoUrl && (
                    <a 
                      href={experiment.demoUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-macos-blue-500 hover:text-macos-blue-600 dark:text-macos-blue-400 dark:hover:text-macos-blue-300 transition-colors text-sm font-medium"
                    >
                      Live Demo
                    </a>
                  )}
                </div>
              </div>
            </Window>
          ))}
        </div>
        
        <!-- List (show up to 10) -->
        <div class="hidden flex-col gap-2" data-view-section="list">
          {allExperiments.slice(0, 10).map((experiment) => (
            <ProjectListItem 
              title={experiment.title}
              description={experiment.description}
              technologies={experiment.technologies}
              githubUrl={experiment.githubUrl}
              liveUrl={experiment.demoUrl}
              category={experiment.category}
            />
          ))}
        </div>
        
        <div class="text-center mt-12">
          <a 
            href="/experiments" 
            class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos inline-block"
          >
            View All Experiments
          </a>
        </div>
      </div>
    </section>

    <!-- Contact Section -->
  <section id="contact" data-ux-note="Trust grows through transparent communication." data-ux-side="right" class="py-20 px-6">
      <div class="max-w-6xl mx-auto">
        <Window title="Get In Touch" class="max-w-2xl mx-auto">
          <div class="text-center">
            <p class="text-macos-gray-600 dark:text-macos-gray-400 mb-8">
              I'm always interested in new opportunities and interesting projects. 
              Let's connect and discuss how we can work together!
            </p>
            
            <div class="flex flex-col sm:flex-row gap-4 justify-center flex-wrap">
              <!-- Email -->
              <a 
                href={`mailto:${personalInfo.email}`} 
                class="bg-macos-blue-500 hover:bg-macos-blue-600 text-white px-8 py-3 rounded-macos font-medium transition-colors shadow-macos inline-flex items-center justify-center"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
                Send Email
              </a>
              <!-- LinkedIn -->
              <a 
                href={personalInfo.linkedin} 
                target="_blank"
                rel="noopener noreferrer"
                class="bg-white/80 dark:bg-macos-gray-800/80 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/50 text-macos-gray-900 dark:text-white px-8 py-3 rounded-macos font-medium transition-colors hover:bg-white/90 dark:hover:bg-macos-gray-800/90 inline-flex items-center justify-center"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
                LinkedIn
              </a>
              <!-- GitHub -->
              <a 
                href={personalInfo.github} 
                target="_blank"
                rel="noopener noreferrer"
                class="bg-white/80 dark:bg-macos-gray-800/80 backdrop-blur-macos border border-white/30 dark:border-macos-gray-700/50 text-macos-gray-900 dark:text-white px-8 py-3 rounded-macos font-medium transition-colors hover:bg-white/90 dark:hover:bg-macos-gray-800/90 inline-flex items-center justify-center"
                aria-label="GitHub Profile"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path d="M12 0C5.37 0 0 5.37 0 12a12 12 0 008.21 11.44c.6.11.82-.26.82-.58l-.02-2.04c-3.34.73-4.04-1.42-4.04-1.42-.55-1.39-1.34-1.76-1.34-1.76-1.09-.75.08-.73.08-.73 1.2.08 1.84 1.24 1.84 1.24 1.07 1.83 2.81 1.3 3.49.99.11-.78.42-1.3.76-1.6-2.66-.3-5.47-1.33-5.47-5.93 0-1.31.47-2.38 1.24-3.19-.13-.3-.54-1.52.11-3.17 0 0 1.01-.32 3.31 1.23a11.5 11.5 0 013.02-.41c1.02 0 2.05.14 3.02.41 2.3-1.55 3.31-1.23 3.31-1.23.65 1.65.24 2.87.12 3.17.77.81 1.24 1.88 1.24 3.19 0 4.61-2.81 5.62-5.49 5.92.43.37.82 1.1.82 2.22l-.01 3.29c0 .32.21.7.82.58A12 12 0 0024 12c0-6.63-5.37-12-12-12z" />
                </svg>
                GitHub
              </a>
            </div>
          </div>
        </Window>
      </div>
    </section>

    <!-- Dock Navigation -->
    <Dock items={dockItems} />
  </main>
</Layout>

<script>
  // @ts-nocheck
  const HOME_VIEW_KEY = 'home:view';
  // @ts-ignore - inline script in .astro not picking up JSDoc param type reliably
  /** @type {(view: 'grid' | 'list') => void} */
  const applyHomeView = (view) => {
    const isGrid = view === 'grid';
    document.querySelectorAll('[data-view-section="grid"]').forEach(el => {
      el.classList.toggle('hidden', !isGrid);
    });
    document.querySelectorAll('[data-view-section="list"]').forEach(el => {
      el.classList.toggle('hidden', isGrid);
      el.classList.toggle('flex', !isGrid);
    });
    const gridBtn = document.querySelector('#home-view-toggle .grid-view');
    const listBtn = document.querySelector('#home-view-toggle .list-view');
    if (gridBtn && listBtn) {
      gridBtn.classList.toggle('active', isGrid);
      listBtn.classList.toggle('active', !isGrid);
      gridBtn.setAttribute('aria-pressed', String(isGrid));
      listBtn.setAttribute('aria-pressed', String(!isGrid));
      gridBtn.classList.toggle('text-macos-gray-800', isGrid);
      gridBtn.classList.toggle('dark:text-macos-gray-100', isGrid);
      listBtn.classList.toggle('text-macos-gray-800', !isGrid);
      listBtn.classList.toggle('dark:text-macos-gray-100', !isGrid);
    }
  };
  document.addEventListener('DOMContentLoaded', () => {
    const initial = localStorage.getItem(HOME_VIEW_KEY) || 'grid';
    applyHomeView(initial);
    document.querySelectorAll('#home-view-toggle .home-view-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const view = btn.getAttribute('data-view');
        if (!view) return;
        localStorage.setItem(HOME_VIEW_KEY, view);
        applyHomeView(view);
      });
    });

    // Rotate hybrid titles
    const rotator = document.getElementById('role-rotator');
    const titleLine = document.getElementById('title-line');
    if (rotator && titleLine) {
      try {
        const roles = JSON.parse(titleLine.getAttribute('data-roles') || '[]');
        let i = 0;
        if (Array.isArray(roles) && roles.length > 1) {
          setInterval(() => {
            i = (i + 1) % roles.length;
            rotator.classList.add('opacity-0', 'translate-y-1', 'transition-all');
            setTimeout(() => {
              rotator.textContent = roles[i];
              rotator.classList.remove('translate-y-1');
              rotator.classList.add('-translate-y-1');
              requestAnimationFrame(() => {
                rotator.classList.remove('opacity-0', '-translate-y-1');
              });
            }, 180);
          }, 3200);
        }
      } catch { /* ignore */ }
    }

    // Side gutter UX concept sentences (subtle)
    const uxSections = document.querySelectorAll('section[data-ux-note]');
    const gutterObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) entry.target.classList.add('ux-note-visible');
        else entry.target.classList.remove('ux-note-visible');
      });
    }, { threshold: 0.25, rootMargin: '-10% 0px -10% 0px' });
    uxSections.forEach(s => gutterObserver.observe(s));

    // Micro parallax (very small) to add life
    const updateUxNoteShift = () => {
      const vh = window.innerHeight;
      uxSections.forEach(sec => {
        const rect = sec.getBoundingClientRect();
        const center = rect.top + rect.height / 2;
        const delta = (center - vh / 2) / vh; // -1..1
        const shift = Math.max(-12, Math.min(12, -delta * 20));
        sec.style.setProperty('--ux-note-shift', shift.toFixed(1) + 'px');
      });
    };
    // Adaptive vertical placement based on section height
    const updateUxNoteVertical = () => {
      const vh = window.innerHeight;
      uxSections.forEach(sec => {
        const h = sec.offsetHeight || 0;
        const r = h / vh; // ratio section height to viewport height
        let top; // percentage
        if (r >= 1.4) top = 34; // very tall section
        else if (r >= 1.2) top = 36;
        else if (r >= 1.0) top = 39; // full screen
        else if (r >= 0.85) top = 42;
        else if (r >= 0.7) top = 45;
        else if (r >= 0.55) top = 47;
        else top = 50; // short sections -> closer to center
        sec.style.setProperty('--ux-note-top', top + '%');
      });
    };
    updateUxNoteShift();
    updateUxNoteVertical();
    window.addEventListener('scroll', updateUxNoteShift, { passive: true });
    window.addEventListener('resize', () => { updateUxNoteShift(); updateUxNoteVertical(); });
  });
</script>

<style>
  /* Side gutter UX concept sentences */
  section[data-ux-note] { position: relative; }
  section[data-ux-note] > * { position: relative; z-index: 1; }
  section[data-ux-note]::before {
    content: attr(data-ux-note);
    position: absolute;
    top: var(--ux-note-top, 45%); /* adaptive via JS */
    transform: translateY(calc(-50% + var(--ux-note-shift, 0px)));
    font-size: 0.7rem;
    line-height: 1.25;
    max-width: 14ch;
    font-weight: 500;
    letter-spacing: 0.05em;
    text-transform: none;
    opacity: 0;
    color: rgba(0,0,0,0.25);
    font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "SF Pro Text", "Helvetica Neue", Arial, sans-serif;
    pointer-events: none;
    user-select: none;
    transition: opacity 1s ease, transform .6s ease-out;
    padding-inline: .5rem;
    text-align: left;
  }
  section[data-ux-note][data-ux-side="left"]::before { left: max(1.25rem, calc(env(safe-area-inset-left) + 0.75rem)); }
  section[data-ux-note][data-ux-side="right"]::before { right: max(1.25rem, calc(env(safe-area-inset-right) + 0.75rem)); text-align: right; }
  .dark section[data-ux-note]::before { color: rgba(255,255,255,0.28); }
  section[data-ux-note].ux-note-visible::before { opacity: 1; }
  @media (max-width: 900px) {
    /* Hide gutter sentences on smaller viewports to avoid crowding */
    section[data-ux-note]::before { display: none; }
  }
  @media (min-width: 1600px) {
    section[data-ux-note]::before { font-size: 0.75rem; max-width: 16ch; }
  }
  @media (prefers-reduced-motion: reduce) {
    section[data-ux-note]::before { transition: opacity .6s ease !important; }
  }
</style>
